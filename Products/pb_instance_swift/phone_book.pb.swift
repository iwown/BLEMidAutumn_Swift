// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: phone_book.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum PhoneOperation: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case add // = 1
  case remove // = 2
  case clear // = 3

  init() {
    self = .add
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .add
    case 2: self = .remove
    case 3: self = .clear
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .add: return 1
    case .remove: return 2
    case .clear: return 3
    }
  }

}

#if swift(>=4.2)

extension PhoneOperation: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

enum PhoneResponse: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case succeed // = 1
  case fail // = 2
  case exist // = 3

  init() {
    self = .succeed
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 1: self = .succeed
    case 2: self = .fail
    case 3: self = .exist
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .succeed: return 1
    case .fail: return 2
    case .exist: return 3
    }
  }

}

#if swift(>=4.2)

extension PhoneResponse: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct PhoneBookInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: UInt32 {
    get {return _id ?? 0}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var isSos: Bool {
    get {return _isSos ?? false}
    set {_isSos = newValue}
  }
  /// Returns true if `isSos` has been explicitly set.
  var hasIsSos: Bool {return self._isSos != nil}
  /// Clears the value of `isSos`. Subsequent reads from it will return its default value.
  mutating func clearIsSos() {self._isSos = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var number: String {
    get {return _number ?? String()}
    set {_number = newValue}
  }
  /// Returns true if `number` has been explicitly set.
  var hasNumber: Bool {return self._number != nil}
  /// Clears the value of `number`. Subsequent reads from it will return its default value.
  mutating func clearNumber() {self._number = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _id: UInt32? = nil
  fileprivate var _isSos: Bool? = nil
  fileprivate var _name: String? = nil
  fileprivate var _number: String? = nil
}

struct PhoneBookNotify {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var opt: PhoneOperation {
    get {return _opt ?? .add}
    set {_opt = newValue}
  }
  /// Returns true if `opt` has been explicitly set.
  var hasOpt: Bool {return self._opt != nil}
  /// Clears the value of `opt`. Subsequent reads from it will return its default value.
  mutating func clearOpt() {self._opt = nil}

  var info: [PhoneBookInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _opt: PhoneOperation? = nil
}

struct PhoneBookConfirm {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var res: PhoneResponse {
    get {return _res ?? .succeed}
    set {_res = newValue}
  }
  /// Returns true if `res` has been explicitly set.
  var hasRes: Bool {return self._res != nil}
  /// Clears the value of `res`. Subsequent reads from it will return its default value.
  mutating func clearRes() {self._res = nil}

  var num: UInt32 {
    get {return _num ?? 0}
    set {_num = newValue}
  }
  /// Returns true if `num` has been explicitly set.
  var hasNum: Bool {return self._num != nil}
  /// Clears the value of `num`. Subsequent reads from it will return its default value.
  mutating func clearNum() {self._num = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _res: PhoneResponse? = nil
  fileprivate var _num: UInt32? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension PhoneOperation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ADD"),
    2: .same(proto: "REMOVE"),
    3: .same(proto: "CLEAR"),
  ]
}

extension PhoneResponse: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "SUCCEED"),
    2: .same(proto: "FAIL"),
    3: .same(proto: "EXIST"),
  ]
}

extension PhoneBookInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PhoneBookInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .standard(proto: "is_sos"),
    3: .same(proto: "name"),
    4: .same(proto: "number"),
  ]

  public var isInitialized: Bool {
    if self._id == nil {return false}
    if self._isSos == nil {return false}
    if self._name == nil {return false}
    if self._number == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularFixed32Field(value: &self._id)
      case 2: try decoder.decodeSingularBoolField(value: &self._isSos)
      case 3: try decoder.decodeSingularStringField(value: &self._name)
      case 4: try decoder.decodeSingularStringField(value: &self._number)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._id {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
    }
    if let v = self._isSos {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    }
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    if let v = self._number {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PhoneBookInfo, rhs: PhoneBookInfo) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._isSos != rhs._isSos {return false}
    if lhs._name != rhs._name {return false}
    if lhs._number != rhs._number {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PhoneBookNotify: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PhoneBookNotify"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "opt"),
    2: .same(proto: "info"),
  ]

  public var isInitialized: Bool {
    if self._opt == nil {return false}
    if !SwiftProtobuf.Internal.areAllInitialized(self.info) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._opt)
      case 2: try decoder.decodeRepeatedMessageField(value: &self.info)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._opt {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if !self.info.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.info, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PhoneBookNotify, rhs: PhoneBookNotify) -> Bool {
    if lhs._opt != rhs._opt {return false}
    if lhs.info != rhs.info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension PhoneBookConfirm: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "PhoneBookConfirm"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "res"),
    2: .same(proto: "num"),
  ]

  public var isInitialized: Bool {
    if self._res == nil {return false}
    if self._num == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularEnumField(value: &self._res)
      case 2: try decoder.decodeSingularFixed32Field(value: &self._num)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._res {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    }
    if let v = self._num {
      try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: PhoneBookConfirm, rhs: PhoneBookConfirm) -> Bool {
    if lhs._res != rhs._res {return false}
    if lhs._num != rhs._num {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
