// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: shbus_cmd.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum SBOperation: SwiftProtobuf.Enum {
  typealias RawValue = Int
  case read // = 0
  case write // = 1

  init() {
    self = .read
  }

  init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .read
    case 1: self = .write
    default: return nil
    }
  }

  var rawValue: Int {
    switch self {
    case .read: return 0
    case .write: return 1
    }
  }

}

#if swift(>=4.2)

extension SBOperation: CaseIterable {
  // Support synthesized by the compiler.
}

#endif  // swift(>=4.2)

struct SBDLSleepData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var score: UInt32 {
    get {return _storage._score ?? 0}
    set {_uniqueStorage()._score = newValue}
  }
  /// Returns true if `score` has been explicitly set.
  var hasScore: Bool {return _storage._score != nil}
  /// Clears the value of `score`. Subsequent reads from it will return its default value.
  mutating func clearScore() {_uniqueStorage()._score = nil}

  /// minutes
  var duration: UInt32 {
    get {return _storage._duration ?? 0}
    set {_uniqueStorage()._duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return _storage._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {_uniqueStorage()._duration = nil}

  /// minutes
  var deepsleep: UInt32 {
    get {return _storage._deepsleep ?? 0}
    set {_uniqueStorage()._deepsleep = newValue}
  }
  /// Returns true if `deepsleep` has been explicitly set.
  var hasDeepsleep: Bool {return _storage._deepsleep != nil}
  /// Clears the value of `deepsleep`. Subsequent reads from it will return its default value.
  mutating func clearDeepsleep() {_uniqueStorage()._deepsleep = nil}

  /// minutes
  var somnolence: UInt32 {
    get {return _storage._somnolence ?? 0}
    set {_uniqueStorage()._somnolence = newValue}
  }
  /// Returns true if `somnolence` has been explicitly set.
  var hasSomnolence: Bool {return _storage._somnolence != nil}
  /// Clears the value of `somnolence`. Subsequent reads from it will return its default value.
  mutating func clearSomnolence() {_uniqueStorage()._somnolence = nil}

  /// minutes
  var wakefulness: UInt32 {
    get {return _storage._wakefulness ?? 0}
    set {_uniqueStorage()._wakefulness = newValue}
  }
  /// Returns true if `wakefulness` has been explicitly set.
  var hasWakefulness: Bool {return _storage._wakefulness != nil}
  /// Clears the value of `wakefulness`. Subsequent reads from it will return its default value.
  mutating func clearWakefulness() {_uniqueStorage()._wakefulness = nil}

  /// timestamp of sleep data
  var time: RtTime {
    get {return _storage._time ?? RtTime()}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {_uniqueStorage()._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SBUPSleepData {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// timestamp of current sleep data
  var time: RtTime {
    get {return _storage._time ?? RtTime()}
    set {_uniqueStorage()._time = newValue}
  }
  /// Returns true if `time` has been explicitly set.
  var hasTime: Bool {return _storage._time != nil}
  /// Clears the value of `time`. Subsequent reads from it will return its default value.
  mutating func clearTime() {_uniqueStorage()._time = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SBUserInfo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var card: String {
    get {return _card ?? String()}
    set {_card = newValue}
  }
  /// Returns true if `card` has been explicitly set.
  var hasCard: Bool {return self._card != nil}
  /// Clears the value of `card`. Subsequent reads from it will return its default value.
  mutating func clearCard() {self._card = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _id: String? = nil
  fileprivate var _card: String? = nil
}

struct SBCommand {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operation: SBOperation {
    get {return _storage._operation ?? .read}
    set {_uniqueStorage()._operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  var hasOperation: Bool {return _storage._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  mutating func clearOperation() {_uniqueStorage()._operation = nil}

  /// only valid for Write
  var sleepData: SBDLSleepData {
    get {return _storage._sleepData ?? SBDLSleepData()}
    set {_uniqueStorage()._sleepData = newValue}
  }
  /// Returns true if `sleepData` has been explicitly set.
  var hasSleepData: Bool {return _storage._sleepData != nil}
  /// Clears the value of `sleepData`. Subsequent reads from it will return its default value.
  mutating func clearSleepData() {_uniqueStorage()._sleepData = nil}

  /// only valid for Read
  var userInfo: SBUserInfo {
    get {return _storage._userInfo ?? SBUserInfo()}
    set {_uniqueStorage()._userInfo = newValue}
  }
  /// Returns true if `userInfo` has been explicitly set.
  var hasUserInfo: Bool {return _storage._userInfo != nil}
  /// Clears the value of `userInfo`. Subsequent reads from it will return its default value.
  mutating func clearUserInfo() {_uniqueStorage()._userInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct SBResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var operation: SBOperation {
    get {return _storage._operation ?? .read}
    set {_uniqueStorage()._operation = newValue}
  }
  /// Returns true if `operation` has been explicitly set.
  var hasOperation: Bool {return _storage._operation != nil}
  /// Clears the value of `operation`. Subsequent reads from it will return its default value.
  mutating func clearOperation() {_uniqueStorage()._operation = nil}

  /// only valid for Read
  var sleepData: SBUPSleepData {
    get {return _storage._sleepData ?? SBUPSleepData()}
    set {_uniqueStorage()._sleepData = newValue}
  }
  /// Returns true if `sleepData` has been explicitly set.
  var hasSleepData: Bool {return _storage._sleepData != nil}
  /// Clears the value of `sleepData`. Subsequent reads from it will return its default value.
  mutating func clearSleepData() {_uniqueStorage()._sleepData = nil}

  /// only valid for Read
  var userInfo: SBUserInfo {
    get {return _storage._userInfo ?? SBUserInfo()}
    set {_uniqueStorage()._userInfo = newValue}
  }
  /// Returns true if `userInfo` has been explicitly set.
  var hasUserInfo: Bool {return _storage._userInfo != nil}
  /// Clears the value of `userInfo`. Subsequent reads from it will return its default value.
  mutating func clearUserInfo() {_uniqueStorage()._userInfo = nil}

  var sleepDataInfo: SBDLSleepData {
    get {return _storage._sleepDataInfo ?? SBDLSleepData()}
    set {_uniqueStorage()._sleepDataInfo = newValue}
  }
  /// Returns true if `sleepDataInfo` has been explicitly set.
  var hasSleepDataInfo: Bool {return _storage._sleepDataInfo != nil}
  /// Clears the value of `sleepDataInfo`. Subsequent reads from it will return its default value.
  mutating func clearSleepDataInfo() {_uniqueStorage()._sleepDataInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

extension SBOperation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "Read"),
    1: .same(proto: "Write"),
  ]
}

extension SBDLSleepData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SBDLSleepData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "score"),
    2: .same(proto: "duration"),
    3: .same(proto: "deepsleep"),
    4: .same(proto: "somnolence"),
    5: .same(proto: "wakefulness"),
    6: .same(proto: "time"),
  ]

  fileprivate class _StorageClass {
    var _score: UInt32? = nil
    var _duration: UInt32? = nil
    var _deepsleep: UInt32? = nil
    var _somnolence: UInt32? = nil
    var _wakefulness: UInt32? = nil
    var _time: RtTime? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _score = source._score
      _duration = source._duration
      _deepsleep = source._deepsleep
      _somnolence = source._somnolence
      _wakefulness = source._wakefulness
      _time = source._time
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._score == nil {return false}
      if _storage._duration == nil {return false}
      if _storage._deepsleep == nil {return false}
      if _storage._somnolence == nil {return false}
      if _storage._wakefulness == nil {return false}
      if _storage._time == nil {return false}
      if let v = _storage._time, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularFixed32Field(value: &_storage._score)
        case 2: try decoder.decodeSingularFixed32Field(value: &_storage._duration)
        case 3: try decoder.decodeSingularFixed32Field(value: &_storage._deepsleep)
        case 4: try decoder.decodeSingularFixed32Field(value: &_storage._somnolence)
        case 5: try decoder.decodeSingularFixed32Field(value: &_storage._wakefulness)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._time)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._score {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 1)
      }
      if let v = _storage._duration {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 2)
      }
      if let v = _storage._deepsleep {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 3)
      }
      if let v = _storage._somnolence {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 4)
      }
      if let v = _storage._wakefulness {
        try visitor.visitSingularFixed32Field(value: v, fieldNumber: 5)
      }
      if let v = _storage._time {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SBDLSleepData, rhs: SBDLSleepData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._score != rhs_storage._score {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._deepsleep != rhs_storage._deepsleep {return false}
        if _storage._somnolence != rhs_storage._somnolence {return false}
        if _storage._wakefulness != rhs_storage._wakefulness {return false}
        if _storage._time != rhs_storage._time {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SBUPSleepData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SBUPSleepData"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "time"),
  ]

  fileprivate class _StorageClass {
    var _time: RtTime? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _time = source._time
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._time == nil {return false}
      if let v = _storage._time, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularMessageField(value: &_storage._time)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._time {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SBUPSleepData, rhs: SBUPSleepData) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._time != rhs_storage._time {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SBUserInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SBUserInfo"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "id"),
    3: .same(proto: "card"),
  ]

  public var isInitialized: Bool {
    if self._name == nil {return false}
    if self._id == nil {return false}
    if self._card == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self._name)
      case 2: try decoder.decodeSingularStringField(value: &self._id)
      case 3: try decoder.decodeSingularStringField(value: &self._card)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    }
    if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    }
    if let v = self._card {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SBUserInfo, rhs: SBUserInfo) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._id != rhs._id {return false}
    if lhs._card != rhs._card {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SBCommand: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SBCommand"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
    2: .standard(proto: "sleep_data"),
    3: .standard(proto: "user_info"),
  ]

  fileprivate class _StorageClass {
    var _operation: SBOperation? = nil
    var _sleepData: SBDLSleepData? = nil
    var _userInfo: SBUserInfo? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _operation = source._operation
      _sleepData = source._sleepData
      _userInfo = source._userInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._operation == nil {return false}
      if let v = _storage._sleepData, !v.isInitialized {return false}
      if let v = _storage._userInfo, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._operation)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._sleepData)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._userInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._operation {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._sleepData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._userInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SBCommand, rhs: SBCommand) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operation != rhs_storage._operation {return false}
        if _storage._sleepData != rhs_storage._sleepData {return false}
        if _storage._userInfo != rhs_storage._userInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension SBResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = "SBResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "operation"),
    2: .standard(proto: "sleep_data"),
    3: .standard(proto: "user_info"),
    4: .standard(proto: "sleep_data_info"),
  ]

  fileprivate class _StorageClass {
    var _operation: SBOperation? = nil
    var _sleepData: SBUPSleepData? = nil
    var _userInfo: SBUserInfo? = nil
    var _sleepDataInfo: SBDLSleepData? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _operation = source._operation
      _sleepData = source._sleepData
      _userInfo = source._userInfo
      _sleepDataInfo = source._sleepDataInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._operation == nil {return false}
      if let v = _storage._sleepData, !v.isInitialized {return false}
      if let v = _storage._userInfo, !v.isInitialized {return false}
      if let v = _storage._sleepDataInfo, !v.isInitialized {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularEnumField(value: &_storage._operation)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._sleepData)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._userInfo)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._sleepDataInfo)
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if let v = _storage._operation {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      }
      if let v = _storage._sleepData {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._userInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._sleepDataInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: SBResponse, rhs: SBResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._operation != rhs_storage._operation {return false}
        if _storage._sleepData != rhs_storage._sleepData {return false}
        if _storage._userInfo != rhs_storage._userInfo {return false}
        if _storage._sleepDataInfo != rhs_storage._sleepDataInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
